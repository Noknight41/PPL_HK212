1)

class StaticCheck(Visitor):
    def visitBinOp(self,ctx:BinOp,o): 
        if ctx.op in ["+", "-" , "*"]:
            if(self.visit(ctx.e1, o) == "Int" and self.visit(ctx.e2, o) == "Int"): 
                return "Int"
            elif(self.visit(ctx.e1, o) == "Float" and (self.visit(ctx.e2, o) == "Float" or self.visit(ctx.e2, o) == "Int")):
                return "Float"
            elif(self.visit(ctx.e2, o) == "Float" and (self.visit(ctx.e1, o) == "Float" or self.visit(ctx.e1, o) == "Int")):
                return "Float"
            else: 
                raise TypeMismatchInExpression(ctx) 
        elif ctx.op == "/":
            if((self.visit(ctx.e1, o) == "Float" or self.visit(ctx.e1, o) == "Int") and (self.visit(ctx.e2, o) == "Float" or self.visit(ctx.e2, o) == "Int")):
                return "Float"
            else: 
                raise TypeMismatchInExpression(ctx) 
        elif ctx.op in ["&&", "||"]:
            if(self.visit(ctx.e1, o) == "Bool" and self.visit(ctx.e2, o) == "Bool"):
                return "Bool"
            else: 
                raise TypeMismatchInExpression(ctx) 
        else:
            if(self.visit(ctx.e1, o) == self.visit(ctx.e2, o)):
                return "Bool"
            else: 
                raise TypeMismatchInExpression(ctx) 
        
    def visitUnOp(self,ctx:UnOp,o):
        if ctx.op == "-":
            if(self.visit(ctx.e, o) == "Int"): 
                return "Int"
            elif(self.visit(ctx.e, o) == "Float"):
                return "Float"
            else: 
                raise TypeMismatchInExpression(ctx) 
        else:
            if(self.visit(ctx.e, o) == "Bool"):
                return "Bool"
            else:
                raise TypeMismatchInExpression(ctx) 
            
        
    def visitIntLit(self,ctx:IntLit,o): 
        return "Int"

    def visitFloatLit(self,ctx,o): 
        return "Float"

    def visitBoolLit(self,ctx,o): 
        return "Bool"
	
2)

class StaticCheck(Visitor):
    def visitProgram(self,ctx:Program,o):
        o = {}
        for decl in ctx.decl:
            self.visit(decl, o)
        self.visit(ctx.exp, o)

    def visitVarDecl(self,ctx:VarDecl,o):
        o[ctx.name] = self.visit(ctx.typ, o)

    def visitBinOp(self,ctx:BinOp,o):
        if ctx.op in ["+", "-" , "*"]:
            if(self.visit(ctx.e1, o) == 1 and self.visit(ctx.e2, o) == 1): 
                return 1
            elif(self.visit(ctx.e1, o) == 2 and (self.visit(ctx.e2, o) == 2 or self.visit(ctx.e2, o) == 1)):
                return 2
            elif(self.visit(ctx.e2, o) == 2 and (self.visit(ctx.e1, o) == 2 or self.visit(ctx.e1, o) == 1)):
                return 2
            else: 
                raise TypeMismatchInExpression(ctx) 
        elif ctx.op == "/":
            if((self.visit(ctx.e1, o) == 2 or self.visit(ctx.e1, o) == 1) and (self.visit(ctx.e2, o) == 2 or self.visit(ctx.e2, o) == 1)):
                return 2
            else: 
                raise TypeMismatchInExpression(ctx) 
        elif ctx.op in ["&&", "||"]:
            if(self.visit(ctx.e1, o) == 3 and self.visit(ctx.e2, o) == 3):
                return 3
            else: 
                raise TypeMismatchInExpression(ctx) 
        else:
            if(self.visit(ctx.e1, o) == self.visit(ctx.e2, o)):
                return 3
            else: 
                raise TypeMismatchInExpression(ctx)

    def visitUnOp(self,ctx:UnOp,o):
        if ctx.op == "-":
            if(self.visit(ctx.e, o) == 1): 
                return 1
            elif(self.visit(ctx.e, o) == 2):
                return 2
            else: 
                raise TypeMismatchInExpression(ctx) 
        else:
            if(self.visit(ctx.e, o) == 3):
                return 3
            else:
                raise TypeMismatchInExpression(ctx) 

    def visitIntType(self,ctx,o):
        return 1

    def visitFloatType(self,ctx,o): 
        return 2

    def visitBoolType(self,ctx,o): 
        return 3
    
    def visitIntLit(self,ctx:IntLit,o):
        return 1

    def visitFloatLit(self,ctx,o): 
        return 2

    def visitBoolLit(self,ctx,o): 
        return 3

    def visitId(self,ctx,o): 
        if ctx.name in o:
            return o[ctx.name]
        raise UndeclaredIdentifier(ctx.name) 
        