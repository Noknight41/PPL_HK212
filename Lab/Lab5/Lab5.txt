Pass: y8_NKc

1)
class StaticCheck(Visitor):
    def visitProgram(self,ctx:Program,o:object):
        o = []
        for decl in ctx.decl:
            self.visit(decl, o)

    def visitVarDecl(self,ctx:VarDecl,o:object):
        if ctx.name in o:
            raise RedeclaredDeclaration(ctx.name)
        o += [ctx.name]

    def visitConstDecl(self,ctx:ConstDecl,o:object):
        if ctx.name in o:
            raise RedeclaredDeclaration(ctx.name)
        o += [ctx.name]

    def visitIntType(self,ctx:IntType,o:object):pass

    def visitFloatType(self,ctx:FloatType,o:object):pass

    def visitIntLit(self,ctx:IntLit,o:object):pass
	
2)
from functools import reduce
class StaticCheck(Visitor):
    def visitProgram(self,ctx:Program,o:object):
        o = reduce(lambda x, y: x + [self.visit(y, x)], ctx.decl, [])

    def visitVarDecl(self,ctx:VarDecl,o:object):
        if ctx.name in o:
            raise RedeclaredVariable(ctx.name)
        return ctx.name
        
    def visitConstDecl(self,ctx:ConstDecl,o:object):
        if ctx.name in o:
            raise RedeclaredConstant(ctx.name)
        return ctx.name

    def visitIntType(self,ctx:IntType,o:object):pass

    def visitFloatType(self,ctx:FloatType,o:object):pass

    def visitIntLit(self,ctx:IntLit,o:object):pass
	
3)
class StaticCheck(Visitor):
    def visitProgram(self,ctx:Program,o:object):
        o = []
        for decl in ctx.decl:
            o += [self.visit(decl, o)]

    def visitVarDecl(self,ctx:VarDecl,o:object):
        if ctx.name in o:
            raise RedeclaredVariable(ctx.name)
        return ctx.name
        
    def visitConstDecl(self,ctx:ConstDecl,o:object):
        if ctx.name in o:
            raise RedeclaredConstant(ctx.name)
        return ctx.name

    def visitFuncDecl(self,ctx:FuncDecl,o:object):
        if ctx.name in o:
            raise RedeclaredFunction(ctx.name)
        o1 = []
        for param in ctx.param:
            o1 += [self.visit(param, o1)]
        for decl in ctx.body:
            o1 += [self.visit(decl, o1)]
        return ctx.name

    def visitIntType(self,ctx:IntType,o:object):pass

    def visitFloatType(self,ctx:FloatType,o:object):pass

    def visitIntLit(self,ctx:IntLit,o:object):pass
	
4)
class StaticCheck(Visitor):
    def visitProgram(self,ctx:Program,o:object):
        o = [[]]
        for decl in ctx.decl:
            self.visit(decl, o)

    def visitVarDecl(self,ctx:VarDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredVariable(ctx.name)
        o[0] = o[0] + [ctx.name]
        
    def visitConstDecl(self,ctx:ConstDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredConstant(ctx.name)
        o[0] = o[0] + [ctx.name]

    def visitFuncDecl(self,ctx:FuncDecl,o:object):
        if ctx.name in o[0]:
            raise RedeclaredFunction(ctx.name)
        o[0] = o[0] + [ctx.name]
        env = [[]] + o
        for param in ctx.param:
            self.visit(param, env)
        for dec in ctx.body[0]:
            self.visit(dec, env)
        for dec in ctx.body[1]:
            self.visit(dec, env)

    def visitId(self,ctx:Id,o:object):
        for scope in o:
            if ctx.name in scope:
                return
        raise UndeclaredIdentifier(ctx.name)
    
    def visitIntType(self,ctx:IntType,o:object):pass

    def visitFloatType(self,ctx:FloatType,o:object):pass
    
    def visitIntLit(self,ctx:IntLit,o:object):pass